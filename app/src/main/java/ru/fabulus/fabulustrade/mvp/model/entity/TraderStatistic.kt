package ru.fabulus.fabulustrade.mvp.model.entity

import android.os.Parcelable
import kotlinx.parcelize.Parcelize

@Parcelize
data class TraderStatistic(
    val idTrader: String,
    val termOfTransaction30: Double?,
    val amountDeals30: Int?,
    val profitOfPercent30: Double?,
    val profitTrades30: Double?,
    val losingTrades30: Double?,
    val averageProfitTrades30: Double?,
    val averageLosingTrades30: Double?,
    val actualProfit180: Double?,
    val actualProfit365: Double?,
    val sumProfit365: Double?,
    val averageCountOperationsMonth: Double?,
    val termOfTransaction365: Double?,
    val profitTrades365: Double?,
    val losingTrades365: Double?,
    val averageProfitTrades365: Double?,
    val averageLosingTrades365: Double?,
    val incrDecrDepo365: Double?,
    val colorIncrDecrDepo365: ColorItem?,
    val ratio365Long: Double?,
    val ratio365Short: Double?,
    val termOfTransaction365Long: Double?,
    val termOfTransaction365Short: Double?,
    val profitOfPercent365Long: Double?,
    val losingOfPercent365Long: Double?,
    val percentProfitOfPercent365Long: Double?,
    val percentLosingOfPercent365Long: Double?,
    val profitOfPercent365Short: Double?,
    val losingOfPercent365Short: Double?,
    val percentProfitOfPercent365Short: Double?,
    val percentLosingOfPercent365Short: Double?,
    val termOfTransactionNDeals: Double?,
    val profitOfPercentNDeals: Double?,
    val losingOfPercentNDeals: Double?,
    val averageProfitTradesNDeals: Double?,
    val averageLosingTradesNDeals: Double?,
    val incrDecrDepoNDeals: Double?,
    val colorIncrDecrDepoNDeals: ColorItem?,
    val ratioNDealsLong: Double?,
    val ratioNDealsShort: Double?,
    val termOfTransactionNDealsLong: Double?,
    val termOfTransactionNDealsShort: Double?,
    val profitOfPercentNDealsLong: Double?,
    val losingOfPercentNDealsLong: Double?,
    val percentProfitOfPercentNDealsLong: Double?,
    val percentLosingOfPercentNDealsLong: Double?,
    val profitOfPercentNDealsShort: Double?,
    val losingOfPercentNDealsShort: Double?,
    val percentProfitOfPercentNDealsShort: Double?,
    val percentLosingOfPercentNDealsShort: Double?,
    val monthIndicators: List<MonthIndicator>,
    val audienceData: List<AudienceData>
) : Parcelable